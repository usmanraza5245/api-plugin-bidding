type Bid implements Node {
  _id: ID!
  productId: ID!
  productSlug: String!
  reactionVariantId: ID!
  reactionProductId: ID!
  product: ProductVariant
  updatedAt: DateTime
  createdAt: DateTime
  status: String
  offerBy: ID
  activeOffer: Offer
  sellerOffer: Offer
  buyerOffer: Offer
  canAccept: ID
  offers: [Offer]
  gameCanAccept: ID
  acceptedGame: Offer
  gameAcceptedAt: DateTime
  gameAcceptedBy: ID
  acceptedOffer: Offer
  shopId: ID!
  name: String
  description: String
  createdBy: ID
  wonBy: ID
  fileId: String
  fileUrl: String
  lostBy: ID
  bidSplit: String
  isShortList: Boolean
  isFavourite: Boolean
  createdByinfo: createdByUserinfo
  soldBy: ID
  soldByInfo: createdByUserinfo
  bidMetaFields: [bidMetaFields]
  tuneVibe: [String]
  isMasterSample: Boolean
  pitchingPeriod: String
  exclusivePrice: Float
}

type bidMetaFields {
  collaboratorEmail: String
  collaboratorSplit: String
  collaboratorName: String
  status: String
}

type Offer implements Node {
  _id: ID!
  amount: Money!
  text: String
  updatedAt: DateTime
  createdAt: DateTime
  sender: createdByUserinfo
  createdBy: ID
  type: offerTypes
  status: String
  reciever: createdByUserinfo
  createdFor: ID
  canAccept: ID
}
type Opportunities {
  _id: String
  product: Product
}

input opportunityInput {
  userId: [String]
  pageNo: Int!
  perPage: Int!
}
input onBidInput {
  productId: ID!
  variantId: ID!
}
input filterInput {
  productId: ID!
  variantId: ID!
  flag: String!
}
type productBids {
  bids: [Bid]
  count: Int
}
extend type Query {
  getProductBids(input: onBidInput): productBids
  getBidsbyAccountId(isSeller: Boolean!): [Bid]
  getOpportunities(input: opportunityInput): [Opportunities]
  getMyBidsOnProduct(input: onBidInput): [Bid]
  getBidsbySellerId: [Bid]
  getBidsOnMyProduct(input: onBidInput): [Bid]
  myNotifications: [Notification]
  getFilteredBids(input: filterInput): [Bid]
  getActiveBidOnProduct(input: activeBidInput): activeBidPayLoad
  getBidsbyUserId(userId: ID!, isSeller: Boolean!): [Bid]
}
type Notification {
  _id: ID
  details: String
  hasDetails: Boolean
  message: String
  status: notificationStatus
  timeSent: DateTime
  to: ID!
  from: ID
  sender: createdByUserinfo
  type: notificationTypes
  url: String
}
input createNotificationInput {
  details: String
  hasDetails: Boolean!
  message: String!
  to: ID!
  type: notificationTypes!
}

enum notificationTypes {
  bid
  offer
  follow
  newOrder
  orderCanceled
  orderAccepted
}
enum notificationStatus {
  unread
  read
}
extend type Subscription {
  offer(userId: ID!): offerSubscriptionPayload
  newBid(userId: ID!): Bid
  startCoinToss(bidId: ID!): coinTossSubscriptionPayload
  notifications(userId: ID!): Notification
}

type coinTossSubscriptionPayload {
  result: String
  wonBy: ID
  wonByInfo: createdByUserinfo
  lostByInfo: createdByUserinfo
  lostBy: ID
  data: String
  head: ID
  tail: ID
  bidId: ID
  winnerOffer: Offer
  loserOffer: Offer
}
type offerSubscriptionPayload {
  offer: Offer!
  offerType: offerTypes!
  bidId: ID
  canAccept: ID
  canAcceptGame: ID
  productId: ID
  variantId: ID
  userId: ID
}
type removed {
  success: Boolean
  message: String
  status: Int
}

type updated {
  success: Boolean
  message: String
  status: Int
}

type acceptedBid {
  success: Boolean
  message: String
  status: Int
}

input updateBid {
  isShortList: Boolean!
  isFavourite: Boolean!
  bidId: String!
}

input acceptSubmissionStatus {
  id: String!
  email: String!
}

extend type Mutation {
  updateSubmissionCollaboratorStatus(input: acceptSubmissionStatus!): updated
  removeProduct(productId: String!): removed
  updateBidonProduct(input: updateBid): updated
  placeBidOnProduct(input: placeBidInput): placeBidPayLoad
  sendOffer(input: sendOfferInput): Offer
  removeBid(bidId: String!): removed
  updateCartOfferPrice(cartId: ID!, bidId: ID!): Cart
  createNotification(input: createNotificationInput): Notification
  markAsRead(notificationId: ID): Notification
  acceptBid(bidId: String!): acceptedBid
}

enum coinTossOptions {
  head
  tail
}
type coinTossResult {
  userSelection: String
  winner: ID
  loser: ID
  acceptedOffer: Offer
}
input activeBidInput {
  productId: ID!
  variantId: ID!
}
type activeBidPayLoad {
  bidId: ID!
  offer: Offer
  isValid: Boolean
}
type placeBidPayLoad {
  bidId: ID
}
input placeBidInput {
  shopId: ID!
  productId: ID!
  variantId: ID!
  soldby: ID!
  offer: offerInput!
  offerType: offerTypes!
  productPrice: MoneyInput!
  fileUrl: String
  fileId: String
  name: String
  bidSplit: String
  isShortList: Boolean!
  isFavourite: Boolean!
  description: String
  bidMetaFieldsInput: [bidMetaFieldsInput]
  tuneVibe: [String]
  isMasterSample: Boolean
  pitchingPeriod: String
  exclusivePrice: Float
}

input bidMetaFieldsInput {
  collaboratorEmail: String
  collaboratorSplit: String
  collaboratorName: String
  status: String
}

input offerInput {
  amount: MoneyInput!
  text: String
  status: String
}

input sendOfferInput {
  bidId: ID!
  offer: offerInput!
  to: ID!
  type: offerTypes!
}
enum offerTypes {
  text
  counterOffer
  acceptedOffer
  rejectOffer
  gameRequest
  acceptedGame
  rejectedGame
}

extend type Mutation {
  followUser(userName: String!): profileObj
  unfollowUser(userName: String!): String
}
extend type Query {
  getUserByuserName(userName: String!): userProfile
  isAvailable(userName: String!): Boolean
}
type followUserInfo {
  image: String
  name: String
  userName: String
}
type profile {
  name: String
  picture: String
  username: String
  firstName: String
  lastName: String
}
type profileObj {
  name: String
  profile: profile
  username: String
}
extend type ProductVariant {
  slug: String
}
type userProfile {
  name: String
  userName: String
  profilePhoto: String
  products: [ProductVariant]
  follower: [profileObj]
  following: [profileObj]
  isVerified: Boolean
  canFollow: Boolean
}
